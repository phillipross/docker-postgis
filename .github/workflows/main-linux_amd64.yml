name: Build amd64

on:
#  workflow_dispatch
  push:
#  pull_request:
#  schedule:
#    - cron: '15 5 * * 1'

defaults:
  run:
    shell: bash

jobs:

  make-docker-images:
    strategy:
      matrix:
#        runner-platform: ['ubuntu-24.04', 'ubuntu-24.04-arm']
        runner-platform: ['ubuntu-24.04']
#        postgres: [13, 14, 15, 16, 17]
        postgres: [17]
        postgis: ['3.5']
        variant: [default, alpine]
#        include:
#          - postgres: 16
#            postgis: master
#            variant: default
#            runner-platform: 'ubuntu-24.04'
#          - postgres: 17
#            postgis: master
#            variant: default
#            runner-platform: 'ubuntu-24.04'
#          - postgres: 16
#            postgis: master
#            variant: default
#            runner-platform: 'ubuntu-24.04-arm'
#          - postgres: 17
#            postgis: master
#            variant: default
#            runner-platform: 'ubuntu-24.04-arm'
#          - postgres: 17
#            postgis: '3.6.0alpha1'
#            variant: alpine
#            runner-platform: 'ubuntu-24.04'
#          - postgres: 17
#            postgis: '3.6.0alpha1'
#            variant: alpine
#            runner-platform: 'ubuntu-24.04-arm'


    name: Build docker image for ${{ matrix.postgres }}-${{ matrix.postgis }} variant ${{ matrix.variant }} on ${{ matrix.runner-platform }}
    runs-on: ${{ matrix.runner-platform }}
    continue-on-error: ${{ matrix.postgis == 'master' }}
    env:
      VERSION: ${{ matrix.postgres }}-${{ matrix.postgis }}
      VARIANT: ${{ matrix.variant }}

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Report storage utilization after code checkout
      run: make diskfree

    - name: Install/config specific version of Docker packages
      env:
        DOCKER_APT_PKG_VER: '5:28.3.1-1~ubuntu.24.04~noble'
      run: |
        echo "***** Removing any currently installed conflicting packages..."
        for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
        echo "***** Setting up Docker's APT repo..."
        sudo apt-get update
        sudo apt-get install ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
        echo "*****  Check available docker-ce versions ."
        sudo apt policy docker-ce
        echo "***** Installing Docker packages..."
        sudo apt-get install docker-ce=${{ env.DOCKER_APT_PKG_VER }} docker-ce-cli=${{ env.DOCKER_APT_PKG_VER }} containerd.io docker-buildx-plugin docker-compose-plugin
        echo "***** Verifying initial Docker installation..."
        docker run hello-world
        echo "***** Displaying Docker information..."
        docker info
        echo "***** Configuring Docker for containerd image store and builder keepStorage..."
        echo "{ \"features\": { \"containerd-snapshotter\": true }}" | sudo tee /etc/docker/daemon.json
        echo $'{
          "features": {
            "containerd-snapshotter": true
          },
          "builder": {
            "gc": {
              "defaultKeepStorage": "20GB",
              "enabled": true
            }
          }
        }' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker
        docker info -f '{{ .DriverStatus }}'

    - name: Report storage utilization after installing Docker packages
      run: |
        make diskfree
        make buildx-du
        make buildx-inspect

    - name: Load binfmt platforms for QEMU
      run: |
        make binfmt
        docker images --tree

    - name: Build docker image for ${{ env.VERSION }} ${{ env.VARIANT }}
      env:
        TAG_SUFFIX: "-linux_amd64"
      run: make test

    - name: Report storage utilization after image build
      run: |
        make image-list-postgis-full
        make diskfree
        make buildx-du
        make buildx-inspect
        make external-cache-du

    - name: Upload local cache
      uses: actions/upload-artifact@v4
      id: upload-local-cache
      with:
        name: docker-postgis_localcache_postgis_postgis_${{ env.VERSION }}-${{ env.VARIANT }}_linux_amd64
        path: external-cache/
        if-no-files-found: warn
        retention-days: 8 # 1 to 90 (days)
        compression-level: 6 # 0 to 9, default 6
        overwrite: false # true or false
        include-hidden-files: true # true or false

    - name: Login to dockerhub
      uses: docker/login-action@v3
      if: ${{ (github.repository == 'postgis/docker-postgis') && (github.ref == 'refs/heads/master') && (github.event_name != 'pull_request') }}
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

    - name: Push docker image to dockerhub
      # !!!! ONLY push the images when built on ubuntu-24.04 x86 runner for now, NOT for ubuntu-24.04-arm runners
      if: ${{ (github.repository == 'postgis/docker-postgis') && (github.ref == 'refs/heads/master') && (github.event_name != 'pull_request') && ( matrix.runner-platform == 'ubuntu-24.04' ) }}
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_ACCESS_TOKEN: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      run: make push

